name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: training-courses
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        ports:
          - 3306:3306

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, bcmath, sqlite3, pdo, pdo_mysql, xml  # Add necessary extensions
        coverage: none
        ini-values: |
          memory_limit=512M
          post_max_size=32M

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Copy .env file
      run: cp .env.example .env

    - name: Update .env with MySQL settings
      run: |
        sed -i 's|DB_CONNECTION=.*|DB_CONNECTION=mysql|' .env
        sed -i 's|DB_HOST=.*|DB_HOST=127.0.0.1|' .env
        sed -i 's|DB_PORT=.*|DB_PORT=3306|' .env
        sed -i 's|DB_DATABASE=.*|DB_DATABASE=training-courses|' .env
        sed -i 's|DB_USERNAME=.*|DB_USERNAME=root|' .env
        sed -i 's|DB_PASSWORD=.*|DB_PASSWORD=|' .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Run Laravel migrations
      run: php artisan migrate --force

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Node.js dependencies
      run: npm install
      
    - name: Clear caches
      run: |
        php artisan config:clear
        php artisan cache:clear
        php artisan route:clear
        php artisan view:clear 

    - name: Build frontend assets
      run: npm run build    

    - name: Run tests
      run: |
        php artisan key:generate --env=testing
        php artisan migrate --env=testing --force
        php artisan config:cache
        ./vendor/bin/phpunit --configuration phpunit.xml

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.SECRET_TOKEN }}  # Pass the GITHUB_TOKEN to authenticate
        publish_dir: ./dist  # Path to the directory to be published

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker image
      run: |
        docker-compose build
        docker tag training-courses:latest 474668393194.dkr.ecr.us-east-1.amazonaws.com/training-courses:latest
        docker push 474668393194.dkr.ecr.us-east-1.amazonaws.com/training-courses:latest